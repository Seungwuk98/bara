fn merge(list, buffer, start, mid, end) {
  var i = start;
  var j = mid + 1;
  var k = 0;
  while i <= mid && j <= end {
    if list[i] < list[j] {
      buffer[k] = list[i];
      i += 1;
    } else {
      buffer[k] = list[j];
      j += 1;
    }
    k += 1;
  }

  while i <= mid {
    buffer[k] = list[i];
    i += 1;
    k += 1;
  }

  while j <= end {
    buffer[k] = list[j];
    j += 1;
    k += 1;
  }

  for (var i = start; i <= end; i += 1) {
    list[i] = buffer[i - start]; 
  }
}

fn mergeSortImpl(list, buffer, start, end) {
  if (start < end) {
    var mid = (start + end) / 2;
    mergeSortImpl(list, buffer, start, mid);
    mergeSortImpl(list, buffer, mid + 1, end);
    merge(list, buffer, start, mid, end);
  }
}

fn mergeSort(list) {
  var buffer = [0] * len(list);
  mergeSortImpl(list, buffer, 0, len(list) - 1);
  return list;
}

var N = int(input());
var list = [];

for (var i = 0; i < N; i += 1) {
  push(list, int(input()));
} 

mergeSort(list);

for (var i = 0; i < N; i += 1) {
  print(list[i]);
}
