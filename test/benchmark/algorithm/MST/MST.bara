
fn map(lambda, array) {
  var newArray = [];
  for (var i = 0; i < len(array); i += 1) {
    push(newArray, lambda(array[i]));
  }
  return newArray;
}

var NM = map(int, split(input()));
var N = NM[0];
var M = NM[1];

var parent = [0] * (N + 1);
for (var i = 1; i <= N; i += 1) {
  parent[i] = i;
}
var rank = [0] * (N + 1);

fn findParent(x) {
  if parent[x] == x {
    return x;
  }
  parent[x] = findParent(parent[x]);
  return parent[x];
}

fn union(x, y) {
  var px = findParent(x);
  var py = findParent(y);
  if px == py {
    return false;
  }
  
  if rank[px] < rank[py] {
    parent[px] = py;
  } else {
    parent[py] = px;
    if rank[px] == rank[py] {
      rank[px] += 1;
    }
  }
  return true;
}

var edges = [];

for (var i = 0; i < M; i += 1) {
  var edgeInput = map(int, split(input()));
  push(edges, (edgeInput[2], edgeInput[0], edgeInput[1])); 
}

fn partition(list, start, end) {
  var pivot = list[start];

  var i = start + 1;
  for (var j = i; j <= end; j += 1) {
    if list[j] < pivot {
      (list[i], list[j]) = (list[j], list[i]);
      i += 1;
    }
  }

  (list[start], list[i - 1]) = (list[i - 1], list[start]);
  return i - 1;
}

fn quickSortImpl(list, start, end) {
  if start < end {
    var pivotIndex = random(start, end + 1); 
    (list[start], list[pivotIndex]) = (list[pivotIndex], list[start]);
    pivotIndex = partition(list, start, end);
    quickSortImpl(list, start, pivotIndex - 1);
    quickSortImpl(list, pivotIndex + 1, end);
  }
}

fn quickSort(list) {
  quickSortImpl(list, 0, len(list) - 1);
}

quickSort(edges);
var cost = 0;
for (var idx = 0; idx < len(edges); idx += 1) {
  var (w, u, v) = edges[idx];
  if union(u, v) {
    cost += w;
  }
}
print(cost);

